# programming_dictionary = {
#   "Bug": "An error in a program that prevents the program from running as expected.",
#   "Function": "A piece of code that you can easily call over and over again."
# }

# # Retrieving items from dictionary.
# # print(programming_dictionary["Function"])

# # Adding new items to dictionary.
# programming_dictionary["Loop"] = "The action of doing sth over and over again."
# print(programming_dictionary)

# # Create an empty dictionary
# empty_dictionary = {}

# # Wipe an existing dictionary
# # programming_dictionary = {}
# # print(programming_dictionary)

# # Edit an item in a dictionary
# programming_dictionary["Bug"] = "A moth in your computer."
# print(programming_dictionary)

# for key in  programming_dictionary:
#   print(key)
#   print(programming_dictionary[key])
# .............................................................
# student_scores = {
#   "Harry" : 81,
#   "Ron" : 78,
#   "Hermione" : 99,
#   "Draco" : 74,
#   "Neville" : 62,
# }

# for scores in student_scores :
#   if student_scores[scores] >= 91 and student_scores[scores] < 100 :
#     print("Grade = Outstanding")
#   elif student_scores[scores] >= 81 and student_scores[scores] < 91 :
#     print("Grade=Exceeds Expectations")
#   elif student_scores[scores] >= 71 and student_scores[scores] < 81 :
#     print("Grade=Acceptable")
#   elif student_scores[scores] <71 :
#     print("Grade=Fail")
# .............................................................
# student_scores = {
#    "Harry" : 81,
#    "Ron" : 78,
#    "Hermione" : 99,
#    "Draco" : 74,
#    "Neville" : 62,
# }

# student_grades = {}

# for student in student_scores:
#   score = student_scores[student]
#   if score > 90:
#     student_grades[student] = "Outstanding"
#   elif score > 80:
#     student_grades[student] = "Exceeds Expectations"
#   elif score > 70:
#     student_grades[student] = "Acceptable"
#   else :
#     student_grades[student] = "Fail"

# print(student_grades)
# .........................................................
# Nesting 
# capitals = {
#   "France": "Paris",
#   "Germany": "Berlin",
# }
# ......................................................
# Nesting a list in a Dictionary
# travel_log = {
#   "France": ["Paris", "Lille", "Dijon"],
#   "Germany": ["Berlin", "Hamburg", "Stuttgart"]
# }
# ......................................................
# Nesting Dictionary in a Dictionary
# travel_log = {
#   "France":{"citites_visited": ["Paris", "Lille", "Dijon"], "total_visits": 12 },
#   "Germany": {"cities_visited": ["Berlin", "Hamburg", "Stuttgart"], "total_visits": 5},
# }
# ......................................................
# Nesting Dictionary in a list 
# travel_log = [
#   {
#     "country": "France",
#     "cities_visited": ["Paris", "Lille", "Dijon"],
#     "total_visits" : 12
#   },
#   {
#     "country": "Germany",
#     "cities_visited": ["Berlin", "Hamburg", "Stuttgart"],
#     "total_visits": 5
#   },
# ]
# ......................................................
travel_log = [
{
    "Country": "France",
    "Visits": 12,
    "Cities": ["Paris", "Lille", "Dijon"]
},
{
  "Country": "Germany",
  "visits": 5,
  "cities": ["Berlin", "Hamburg", "Stuttgart"]
},
]

def add_new_country(country_visited, times_visited, cities_visited) :
  new_country = {}
  new_country["country"] = country_visited
  new_country["visits"] = times_visited
  new_country["cities"] = cities_visited
  travel_log.append(new_country)

add_new_country("Rusia", 2, ["Moscow", "Saint Petersburg"])
print(travel_log)
